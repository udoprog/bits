#!/usr/bin/env node
// vim: ft=javascript

var fs = require('fs'),
    util = require('util');

var npm = null;

try {
    var module = require('npm');

    npm = {
      loaded: false,
      conf: {},
      module: module
    };
} catch(ex) {
}

function load_npm(load_callback, request, callback) {
    npm.module.load(npm.conf, function(er) {
        // on error stop trying to load npm.
        if (er) {
            console.error("Unable to load npm");
            console.error(er.stack);
            npm = null;
        }
        else {
            npm.loaded = true;
        }

        load_callback(request, callback);
    });
}

function ping_handler(request, callback) {
    var capabilities = [];

    if (npm) {
        if (!npm.loaded) {
            load_npm(ping_handler, request, callback);
            return;
        }

        capabilities[capabilities.length] = 'npm';
    }

    callback.result({
        '__type__': 'pong',
        'capabilities': capabilities
    });
}

function npm_view(request, callback) {
    if (!npm) {
        callback.error("npm capability not available");
        return;
    }

    if (!npm.loaded) {
        callback.error("npm capability not loaded");
        return;
    }

    if (!request.package) {
        callback.error("Missing key 'package'");
        return;
    }

    var pkg = request.package;
    var candidate = null;
    var installed = null;

    function submit_result() {
        callback.result({
            "__type__": "info",
            "candidate": candidate,
            "installed": installed
        });
    }

    function handle_installed(er, data, lite) {
        if (er) {
            callback.error(er.toString());
            return;
        }

        if (data._found > 1) {
            callback.error("Too many results for candidate");
            return;
        }

        if (data._found === 1) {
            pkg_data = data.dependencies[pkg];

            if (!pkg_data) {
                callback.error("No package data matching request");
                return;
            }

            // global
            installed = pkg_data.version;
        }

        submit_result();
    }

    function handle_candidate(er, data) {
        if (er) {
            if (er.code === 'E404') {
                submit_result();
                return;
            }

            callback.error(er.toString());
            return;
        }

        var dist_tags = data['dist-tags'];

        // global
        candidate = dist_tags.latest;

        npm.module.ls(pkg, handle_installed);
    }

    // TODO: write a parallel version of this. However keeping the state around
    // is a PITA.
    npm.module.registry.get(pkg, 600, handle_candidate);
}

var handlers = {
    "ping": ping_handler,
    "npm_view": npm_view
};

function handle_request(line, callback) {
    try {
        request = JSON.parse(line.toString());
    } catch (ex) {
        callback.error('Could not decode request, expected type: json');
        return;
    }

    request_type = request.__type__;

    if (!request_type) {
        callback.error("Missing '__type__' in request");
        return;
    }

    handler = handlers[request_type];

    if (!handler) {
        callback.error("No handler for type '" + request_type + "'");
        return;
    }

    return handler(request, callback);
}

(function() {
    var dataFd = process.argv.length > 2 ? parseInt(process.argv[2], 10) : 1;

    if (!dataFd) {
        throw new Error("Unable to determine dataFd");
    }

    if (process.env.NODE_PATH === undefined) {
        fs.writeSync(2, "NODE_PATH is not defined and is required for the node interface to work!\n");
    }

    var inputBuffer = new Buffer([]);

    function write_response(response) {
        response = JSON.stringify(response);
        responseBuffer = new Buffer(response + "\n", 'utf-8');
        fs.write(dataFd, responseBuffer, 0, responseBuffer.length);
    }

    function process_data(data) {
        // offset in the current buffer.
        var offset = 0;

        for (var index = 0; index < data.length; index++) {
            // 10 = \n (newline)
            if (data[index] !== 10) {
                continue;
            }

            var slice_length = index - offset;
            var current = data.slice(offset, slice_length);
            var line = Buffer.concat([inputBuffer, current]);

            inputBuffer = data.slice(index + 1, data.length - offset);

            offset = index;

            // Assume stdin always providers utf-8 encoded data.
            line = line.toString('utf-8');
            this.emit('line', line);
        }
    }

    function process_line(line) {
        callback = {
            result: function(response) {
                write_response(response);
            },
            error: function(text) {
                write_response({
                    "__type__": "error",
                    "text": text
                });
            }
        };

        handle_request(line, callback);
    }

    process.stdin.on('data', process_data);
    process.stdin.on('line', process_line);
})();
